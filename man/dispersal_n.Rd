% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dispersal_n.R
\name{dispersal_n}
\alias{dispersal_n}
\title{Calculate number of individuals dispersing from patch i to j}
\usage{
dispersal_n(
  N,
  v_p_dispersal,
  v_theta,
  dist_mat,
  m_b_dispersal,
  m_c_dispersal,
  m_p_dispersal
)
}
\arguments{
\item{N}{Abundance matrix with \code{nrow = n_sp = 3} and \code{ncol = n_patch}. Rows 1:3 correspond to species B, C, and P respectively.}

\item{v_p_dispersal}{A vector of dispersal probabilities of length = 3. in \code{igp_sim()}, this is controlled with the \code{p_dispersal} argument. Values should be from 0 to 1}

\item{v_theta}{Vector of length = 3, Parameters controlling the distance decay function. Larger values of theta result in a faster decline of dispersal distance. \code{v_theta} is caluclated internally in \code{igp_sim} based on the \code{theta} argument.}

\item{dist_mat}{a distance matrix with \code{nrow = ncol = n_patch} and diagonal == 0.}

\item{m_b_dispersal}{dispersal matrix for species B. This and the following 2 matrices are calculated internally in \code{igp_sim()}}

\item{m_c_dispersal}{dispersal matrix for species C.}

\item{m_p_dispersaldispersal}{matrix for species P.}
}
\value{
A matrix of abundances after accounting for dispersal with \code{nrow = n_sp = 3} and \code{ncol = n_patch}. Values may be returned with decimal values, but will be converted to integers using \code{rpois()} within the simulation model.
}
\description{
Calculate number of individuals dispersing from patch i to j
}
\details{
This function is used internally in \code{igp_sim()} to calculate the number of individuals of each dispersing from patch i to patch j. Emigrants from patch i are more likely to become Immigrants to patch j if the patches are closer together.
}
\examples{
n_patch = 5
n_sp = 3
N = matrix(rpois(n_sp * n_patch, lambda = 10), nrow = n_sp, ncol = n_patch)
# sort coordinates so you can easily see increasing distances
 x_coord = sort(runif(5, 0, 5))
 y_coord = sort(runif(5, 0, 5))
 dist_mat = data.matrix(dist(cbind(x_coord, y_coord)))
disperal_n(N = N, v_p_dispersal = 0.25, theta = 1, dist_mat = dist_mat)


}
